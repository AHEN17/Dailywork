import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Step 1: Create a sample dataset
data = {
    'User': ['User1', 'User1', 'User1', 'User2', 'User2', 'User3', 'User3', 'User4', 'User4', 'User5'],
    'Movie': ['MovieA', 'MovieB', 'MovieC', 'MovieA', 'MovieD', 'MovieB', 'MovieC', 'MovieA', 'MovieC', 'MovieD'],
    'Rating': [5, 3, 4, 5, 4, 4, 2, 4, 5, 3]
}

df = pd.DataFrame(data)

# Step 2: Create a pivot table (User-Movie matrix)
user_movie_matrix = df.pivot_table(index='User', columns='Movie', values='Rating').fillna(0)

# Step 3: Compute cosine similarity between users
user_similarity = cosine_similarity(user_movie_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Step 4: Function to recommend movies based on similar users
def recommend_movies(user, n_recommendations=3):
    # Get similar users
    similar_users = user_similarity_df[user].sort_values(ascending=False).drop(user)
    
    # Get movies that the current user has not rated
    user_movies = user_movie_matrix.loc[user]
    unrated_movies = user_movies[user_movies == 0].index

    # Store predicted ratings for unrated movies
    movie_recommendations = {}

    for movie in unrated_movies:
        total_sim = 0
        weighted_sum = 0
        for similar_user, similarity_score in similar_users.items():
            # Check if the similar user has rated the movie
            if user_movie_matrix.loc[similar_user, movie] > 0:
                weighted_sum += similarity_score * user_movie_matrix.loc[similar_user, movie]
                total_sim += similarity_score
        if total_sim > 0:
            predicted_rating = weighted_sum / total_sim
            movie_recommendations[movie] = predicted_rating

    # Sort and return the top n recommendations
    recommended_movies = sorted(movie_recommendations.items(), key=lambda x: x[1], reverse=True)[:n_recommendations]
    return recommended_movies

# Step 5: Get recommendations for a user (e.g., User1)
recommendations = recommend_movies('User1', 3)
print("Recommended Movies for User1:")
for movie, rating in recommendations:
    print(f"{movie}: Predicted Rating: {rating:.2f}")
